
Loading dataset:   0%|                                                                           | 0/75 [00:00<?, ?it/s]





























Loading dataset: 100%|██████████████████████████████████████████████████████████████████| 75/75 [01:54<00:00,  1.53s/it]









Loading dataset: 100%|██████████████████████████████████████████████████████████████████| 25/25 [00:39<00:00,  1.59s/it]
Training (X / X Steps) (loss=X.X):   0%|                                                         | 0/19 [00:00<?, ?it/s]
UNet(
  (model): Sequential(
    (0): ResidualUnit(
      (conv): Sequential(
        (unit0): Convolution(
          (conv): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
          (adn): ADN(
            (N): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (D): Dropout(p=0.1, inplace=False)
            (A): PReLU(num_parameters=1)
          )
        )
        (unit1): Convolution(
          (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          (adn): ADN(
            (N): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (D): Dropout(p=0.1, inplace=False)
            (A): PReLU(num_parameters=1)
          )
        )
      )
      (residual): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
    )
    (1): SkipConnection(
      (submodule): Sequential(
        (0): ResidualUnit(
          (conv): Sequential(
            (unit0): Convolution(
              (conv): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
              (adn): ADN(
                (N): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                (D): Dropout(p=0.1, inplace=False)
                (A): PReLU(num_parameters=1)
              )
            )
            (unit1): Convolution(
              (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (adn): ADN(
                (N): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                (D): Dropout(p=0.1, inplace=False)
                (A): PReLU(num_parameters=1)
              )
            )
          )
          (residual): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
        )
        (1): SkipConnection(
          (submodule): Sequential(
            (0): ResidualUnit(
              (conv): Sequential(
                (unit0): Convolution(
                  (conv): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
                  (adn): ADN(
                    (N): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                    (D): Dropout(p=0.1, inplace=False)
                    (A): PReLU(num_parameters=1)
                  )
                )
                (unit1): Convolution(
                  (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
                  (adn): ADN(
                    (N): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                    (D): Dropout(p=0.1, inplace=False)
                    (A): PReLU(num_parameters=1)
                  )
                )
              )
              (residual): Conv3d(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            )
            (1): SkipConnection(
              (submodule): Sequential(
                (0): ResidualUnit(
                  (conv): Sequential(
                    (unit0): Convolution(
                      (conv): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
                      (adn): ADN(
                        (N): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                        (D): Dropout(p=0.1, inplace=False)
                        (A): PReLU(num_parameters=1)
                      )
                    )
                    (unit1): Convolution(
                      (conv): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
                      (adn): ADN(
                        (N): InstanceNorm3d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                        (D): Dropout(p=0.1, inplace=False)
                        (A): PReLU(num_parameters=1)
                      )
                    )
                  )
                  (residual): Conv3d(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
                )
                (1): SkipConnection(
                  (submodule): ResidualUnit(
                    (conv): Sequential(
                      (unit0): Convolution(
                        (conv): Conv3d(256, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
                        (adn): ADN(
                          (N): InstanceNorm3d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                          (D): Dropout(p=0.1, inplace=False)
                          (A): PReLU(num_parameters=1)
                        )
                      )
                      (unit1): Convolution(
                        (conv): Conv3d(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
                        (adn): ADN(
                          (N): InstanceNorm3d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                          (D): Dropout(p=0.1, inplace=False)
                          (A): PReLU(num_parameters=1)
                        )
                      )
                    )
                    (residual): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1))
                  )
                )
                (2): Sequential(
                  (0): Convolution(
                    (conv): ConvTranspose3d(768, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), output_padding=(1, 1, 1))
                    (adn): ADN(
                      (N): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                      (D): Dropout(p=0.1, inplace=False)
                      (A): PReLU(num_parameters=1)
                    )
                  )
                  (1): ResidualUnit(
                    (conv): Sequential(
                      (unit0): Convolution(
                        (conv): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
                        (adn): ADN(
                          (N): InstanceNorm3d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                          (D): Dropout(p=0.1, inplace=False)
                          (A): PReLU(num_parameters=1)
                        )
                      )
                    )
                    (residual): Identity()
                  )
                )
              )
            )
            (2): Sequential(
              (0): Convolution(
                (conv): ConvTranspose3d(256, 64, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), output_padding=(1, 1, 1))
                (adn): ADN(
                  (N): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                  (D): Dropout(p=0.1, inplace=False)
                  (A): PReLU(num_parameters=1)
                )
              )
              (1): ResidualUnit(
                (conv): Sequential(
                  (unit0): Convolution(
                    (conv): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
                    (adn): ADN(
                      (N): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                      (D): Dropout(p=0.1, inplace=False)
                      (A): PReLU(num_parameters=1)
                    )
                  )
                )
                (residual): Identity()
              )
            )
          )
        )
        (2): Sequential(
          (0): Convolution(
            (conv): ConvTranspose3d(128, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), output_padding=(1, 1, 1))
            (adn): ADN(
              (N): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (D): Dropout(p=0.1, inplace=False)
              (A): PReLU(num_parameters=1)
            )
          )
          (1): ResidualUnit(
            (conv): Sequential(
              (unit0): Convolution(
                (conv): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
                (adn): ADN(
                  (N): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
                  (D): Dropout(p=0.1, inplace=False)
                  (A): PReLU(num_parameters=1)
                )
              )
            )
            (residual): Identity()
          )
        )
      )
    )
    (2): Sequential(
      (0): Convolution(
        (adn): ADN(
          (N): InstanceNorm3d(6, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (D): Dropout(p=0.1, inplace=False)
          (A): PReLU(num_parameters=1)
        )
      )
      (1): ResidualUnit(
        (conv): Sequential(
          (unit0): Convolution(
            (conv): Conv3d(6, 6, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
          )
        )
        (residual): Identity()
      )
    )
  )
)
Training (X / X Steps) (loss=X.X):   0%|                                                         | 0/19 [00:48<?, ?it/s]
Traceback (most recent call last):
  File "train.py", line 332, in <module>
    torch.save({
  File "train.py", line 209, in main
    label_shape = label.shape
  File "train.py", line 277, in train
    wandb.log({
  File "/opt/conda/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1128, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/opt/monai/monai/networks/nets/unet.py", line 303, in forward
    x = self.model(x)
  File "/opt/conda/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/opt/conda/lib/python3.8/site-packages/torch/nn/modules/container.py", line 141, in forward
    input = module(input)
  File "/opt/conda/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/opt/monai/monai/networks/layers/simplelayers.py", line 128, in forward
    y = self.submodule(x)
  File "/opt/conda/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/opt/conda/lib/python3.8/site-packages/torch/nn/modules/container.py", line 141, in forward
    input = module(input)
  File "/opt/conda/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/opt/monai/monai/networks/layers/simplelayers.py", line 128, in forward
    y = self.submodule(x)
  File "/opt/conda/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/opt/conda/lib/python3.8/site-packages/torch/nn/modules/container.py", line 141, in forward
    input = module(input)
  File "/opt/conda/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/opt/monai/monai/networks/layers/simplelayers.py", line 131, in forward
    return torch.cat([x, y], dim=self.dim)
RuntimeError: Sizes of tensors must match except in dimension 1. Expected size 25 but got size 26 for tensor number 1 in the list.